{
  "db_name": "PostgreSQL",
  "query": "\n        WITH base AS (\n          SELECT\n            mp.market_id,\n            mv.market_pda,\n            mv.symbol,\n            mv.market_type,\n            mv.comparator,\n            mv.bound_lo_1e6,\n            mv.bound_hi_1e6,\n\n            mv.end_date_utc,\n            mv.status,\n            mv.settled,\n\n            mv.price_yes_bp,\n            mv.yes_total_1e6,\n            mv.no_total_1e6,\n            mv.payout_pool_1e6,\n\n            mp.claimed,\n            mp.yes_bet_1e6   AS user_yes_bet_1e6,\n            mp.no_bet_1e6    AS user_no_bet_1e6,\n\n            mv.winning_side,\n\n            CASE\n              WHEN mv.settled AND mv.winning_side = 1 THEN 'yes'\n              WHEN mv.settled AND mv.winning_side = 2 THEN 'no'\n              WHEN mv.settled AND mv.winning_side = 3 THEN 'void'\n              ELSE NULL\n            END AS market_outcome,\n\n            CASE\n              WHEN mv.settled = TRUE AND mp.claimed = FALSE AND (\n                (mv.winning_side = 3 AND (mp.yes_bet_1e6 + mp.no_bet_1e6) > 0) OR\n                (mv.winning_side = 1 AND mp.yes_bet_1e6 > 0) OR\n                (mv.winning_side = 2 AND mp.no_bet_1e6  > 0)\n              )\n              THEN TRUE ELSE FALSE\n            END AS needs_claim,\n\n            CASE\n              WHEN mv.settled = TRUE AND mv.winning_side = 3 THEN\n                (mp.yes_bet_1e6 + mp.no_bet_1e6)\n              WHEN mv.settled = TRUE AND mv.winning_side IN (1,2)\n                   AND (CASE WHEN mv.winning_side = 1 THEN mv.yes_total_1e6 ELSE mv.no_total_1e6 END) > 0\n              THEN\n                FLOOR(\n                  (mv.payout_pool_1e6::NUMERIC *\n                    (CASE WHEN mv.winning_side = 1 THEN mp.yes_bet_1e6 ELSE mp.no_bet_1e6 END)::NUMERIC\n                  )\n                  /\n                  NULLIF(\n                    (CASE WHEN mv.winning_side = 1 THEN mv.yes_total_1e6 ELSE mv.no_total_1e6 END)::NUMERIC,\n                    0\n                  )\n                )::BIGINT\n              ELSE NULL\n            END AS net_claim_1e6\n          FROM market_positions mp\n          JOIN market_view mv ON mv.id = mp.market_id\n          WHERE mp.user_pubkey = $1\n            AND (\n                  ($3::bool = TRUE  AND (mv.settled = FALSE OR (mv.settled = TRUE AND mp.claimed = FALSE)))\n               OR ($3::bool = FALSE AND  (mv.settled = TRUE  AND mp.claimed = TRUE))\n            )\n            AND (\n                 $4::timestamptz IS NULL OR $5::uuid IS NULL\n                 OR (mv.end_date_utc < $4 OR (mv.end_date_utc = $4 AND mp.market_id < $5))\n            )\n          ORDER BY mv.end_date_utc DESC, mp.market_id DESC\n          LIMIT $2\n        )\n        SELECT\n          market_id,\n          market_pda        AS \"market_pda!\",\n          symbol            AS \"symbol!\",\n          market_type       AS \"market_type!\",\n          comparator,\n          bound_lo_1e6,\n          bound_hi_1e6,\n          end_date_utc      AS \"end_date_utc!\",\n          status            AS \"status!\",\n          settled           AS \"settled!\",\n          price_yes_bp,\n          yes_total_1e6     AS \"yes_total_1e6!\",\n          no_total_1e6      AS \"no_total_1e6!\",\n          payout_pool_1e6,\n          claimed,\n          user_yes_bet_1e6  AS \"user_yes_bet_1e6!\",\n          user_no_bet_1e6   AS \"user_no_bet_1e6!\",\n          winning_side,\n          market_outcome,\n          needs_claim        AS \"needs_claim!\",\n          net_claim_1e6\n        FROM base\n        ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "market_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "market_pda!",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "symbol!",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "market_type!",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "comparator",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "bound_lo_1e6",
        "type_info": "Int8"
      },
      {
        "ordinal": 6,
        "name": "bound_hi_1e6",
        "type_info": "Int8"
      },
      {
        "ordinal": 7,
        "name": "end_date_utc!",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 8,
        "name": "status!",
        "type_info": "Text"
      },
      {
        "ordinal": 9,
        "name": "settled!",
        "type_info": "Bool"
      },
      {
        "ordinal": 10,
        "name": "price_yes_bp",
        "type_info": "Int4"
      },
      {
        "ordinal": 11,
        "name": "yes_total_1e6!",
        "type_info": "Int8"
      },
      {
        "ordinal": 12,
        "name": "no_total_1e6!",
        "type_info": "Int8"
      },
      {
        "ordinal": 13,
        "name": "payout_pool_1e6",
        "type_info": "Int8"
      },
      {
        "ordinal": 14,
        "name": "claimed",
        "type_info": "Bool"
      },
      {
        "ordinal": 15,
        "name": "user_yes_bet_1e6!",
        "type_info": "Int8"
      },
      {
        "ordinal": 16,
        "name": "user_no_bet_1e6!",
        "type_info": "Int8"
      },
      {
        "ordinal": 17,
        "name": "winning_side",
        "type_info": "Int2"
      },
      {
        "ordinal": 18,
        "name": "market_outcome",
        "type_info": "Text"
      },
      {
        "ordinal": 19,
        "name": "needs_claim!",
        "type_info": "Bool"
      },
      {
        "ordinal": 20,
        "name": "net_claim_1e6",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Int8",
        "Bool",
        "Timestamptz",
        "Uuid"
      ]
    },
    "nullable": [
      false,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      true,
      null,
      null,
      null
    ]
  },
  "hash": "650fde06a43f4935cf21632021308f59a1b989e10cebf7e9d33e41c043d19ecb"
}
